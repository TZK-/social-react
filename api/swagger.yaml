openapi: 3.0.0
info:
  version: 1.0.0
  title: SocialReact
  contact:
    email: contact@tzk.fr
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  description: >
    This API exposes few endpoints used to interact with SocialReact. <br/>
    Some of these endpoints emit WebSocket messages that you can catch by opening a Websocket on the same host than the API itself.<br/>
    Here are the events you can <b>listen on</b>:<br/>
    <ul>
      <li><strong>disconnect</strong>(return string: User:_id): When a connected user leaves the application</li>
      <li><strong>user_connected</strong>(return string: User:_id): When the user is logged to the application</li>
      <li><strong>friend_post</strong>(return object: Post): When a user friend posts a new message</li>
      <li><strong>friend_request</strong>(return object: Friend): When a user sends a friend requests to the logged user</li>
      <li><strong>friend_accepted</strong>(return object: Friend): When a friend request has been accepted</li>
      <li><strong>friend_denied</strong>(return object: Friend): When a friend request has been denied</li>
      <li><strong>message_posted</strong>(return object: Message): When a private message has been sent, notify the recipient</li>
    </ul>
    <br/>
    There are also some events the API listen on and that can be <strong>emitted from the client side</strong>:<br/>
    <ul>
      <li>
        <strong>user_connected</strong>(return string: User:_id): Send this event when a user has logged in. The API will broadcast the connection event to all the user friends. It will return the logged user though the Websocket.
      </li>
    </ul>
servers:
  - url: /
tags:
  - name: auth
  - name: posts
  - name: friends
  - name: comments
  - name: users
  - name: messages
security:
  - jwt: []
paths:
  /auth:
    post:
      tags:
        - auth
      summary: Get user's JWT authentication token
      description: ""
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: Email used to create an account
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                    description: JTW Auth Token
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Unauthenticated
        "422":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts:
    post:
      tags:
        - posts
      summary: Publish a new post
      description: ""
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
        description: Post content
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthenticated
        "422":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/posts/{id}":
    get:
      tags:
        - posts
      summary: Get a given post data
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Post fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthenticated
        "404":
          description: Post Not found
  "/posts/{id}/comment":
    post:
      tags:
        - posts
        - comments
      summary: Add a new comment to a given post
      description: ""
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/postPosts_id_comment"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "401":
          description: Unauthenticated
        "422":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{id}/feed":
    get:
      tags:
        - posts
      summary: Get the user's posts feed. It includes user's posts and its friend posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Feed fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthenticated
        "404":
          description: User Not found
  "/users/{id}/posts":
    get:
      tags:
        - posts
      summary: Get the user's posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Feed fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthenticated
        "404":
          description: User Not found
  /user/friends:
    get:
      tags:
        - friends
        - users
      summary: Get the user's friends
      responses:
        "200":
          description: Feed fetched
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FriendList"
        "401":
          description: Unauthenticated
  "/friends/{user_id}":
    post:
      tags:
        - friends
      summary: Send a friend request to the given user
      parameters:
        - in: path
          name: user_id
          required: true
          description: The user to send the request
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Friend request sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Friend"
        "401":
          description: Unauthenticated
        "403":
          description: "Forbidden: if you are already friends, or if a request is already
            pending or if you try to request yourself"
  "/friends/{user_id}/accept":
    post:
      tags:
        - friends
      summary: Accept a friend request sent by a given user
      parameters:
        - in: path
          name: user_id
          required: true
          description: The user who sent the request
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No content
        "401":
          description: Unauthenticated
        "403":
          description: "Forbidden: You can not accept a request if it is not intended for
            you"
        "404":
          description: Friend request not found
  "/friends/{user_id}/deny":
    post:
      tags:
        - friends
      summary: Deny a friend request sent by a given user
      parameters:
        - in: path
          name: user_id
          required: true
          description: The user who sent the request
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: No content
        "401":
          description: Unauthenticated
        "404":
          description: Friend request not found
  /users:
    post:
      tags:
        - auth
        - users
      summary: Create a new account
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                password:
                  type: string
                password_confirmation:
                  description: Should match the password field
                  type: string
              required:
                - email
                - first_name
                - last_name
                - password
                - password_confirmation
      responses:
        "201":
          description: No content
    get:
      tags:
        - users
      summary: Get all users
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "401":
          description: Unauthenticated
  "/users/{id}":
    post:
      tags:
        - users
      summary: Get a given user's data
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthenticated
        "404":
          description: User not found
    put:
      tags:
        - users
      summary: Update a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
                password:
                  type: string
                password_confirmation:
                  description: Should match the password field
                  type: string
      responses:
        "200":
          description: The updated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthenticated
        "403":
          description: "Forbidden: User does not have rights to edit"
        "404":
          description: User not found
  "/messages/{recipient_id}":
    get:
      tags:
        - messages
      summary: Get messages between connected user and the recipient
      parameters:
        - in: path
          name: recipient_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          description: Unauthenticated
        "404":
          description: User Recipient not found
    post:
      tags:
        - messages
      summary: Send a message to a recipient
      parameters:
        - in: path
          name: recipient_id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
        "401":
          description: Unauthenticated
        "404":
          description: User Recipient not found

components:
  requestBodies:
    postPosts_id_comment:
      content:
        application/x-www-form-urlencoded:
          schema:
            type: object
            properties:
              content:
                type: string
            required:
              - content
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      required:
        - _id
        - content
        - author
      properties:
        _id:
          type: string
          format: uuid
          example: 5ccdc98890c5ee0e342a4cba
        author:
          $ref: "#/components/schemas/User"
        content:
          type: string
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Comment:
      type: object
      required:
        - _id
        - content
        - author
      properties:
        _id:
          type: string
          format: uuid
          example: 5ccdc98890c5ee0e342a4cba
        content:
          type: string
        author:
          $ref: "#/components/schemas/User"
        post:
          $ref: "#/components/schemas/Post"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User: &user
      type: object
      required:
        - _id
        - email
        - first_name
        - last_name
        - password
      properties: &user_props
        _id:
          type: string
          format: uuid
          example: 5ccdc98890c5ee0e342a4cba
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        friends:
          type: array
          items:
            $ref: "#/components/schemas/Friend"
        avatar:
          type: string
          format: uri
          example: https://s.gravatar.com/avatar/1e4b5895aa75a793d3b4b75038deba?s=256&d=retro
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserFriendRequester:
      <<: *user
      properties:
        <<: *user_props
        isRequester:
          type: boolean
          description: Check if the given user sent the friend request or not
    Friend:
      type: object
      required:
        - _id
        - requester
        - recipient
      properties:
        _id:
          type: string
          format: uuid
          example: 5ccdc98890c5ee0e342a4cba
        requester:
          $ref: "#/components/schemas/User"
        recipient:
          $ref: "#/components/schemas/User"
        accepted:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FriendList:
      type: object
      properties:
        accepted:
          type: array
          description: List user which are already friend with the user
          items:
            properties:
              _id:
                type: string
                format: uuid
                description: Friend Request ID
              friend:
                $ref: "#/components/schemas/UserFriendRequester"
        pending:
          type: array
          description: List user which have sent a friend request to the user that are not
            accepted yet
          items:
            properties:
              _id:
                type: string
                format: uuid
                description: Friend Request ID
              friend:
                $ref: "#/components/schemas/UserFriendRequester"
    Message:
      type: object
      required:
        - _id
        - content
        - author
        - recipient
      properties:
        _id:
          type: string
          format: uuid
          example: 5ccdc98890c5ee0e342a4cba
        content:
          type: string
        author:
          $ref: "#/components/schemas/User"
        recipient:
          $ref: "#/components/schemas/User"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Unprocessable entity
            data:
              type: array
              items:
                properties:
                  field:
                    type: string
                    example: content
                  msg:
                    type: string
                    example: Field cannot be empty
            code:
              type: integer
              description: HTTP status code
              example: 422
